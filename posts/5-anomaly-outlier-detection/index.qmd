---
execute:
  echo: fenced
title: "Anomaly/outlier detection"
title-block-banner: false
author: Kamila Nurkhametova
---

Anomaly and outlier detection are essential components of machine learning, ensuring that models accurately capture the underlying patterns within a dataset. Anomalies represent data points that deviate from the expected pattern or distribution, while outliers are observations with a low probability of occurrence, often distant from other data points.

## Importance of Anomaly Detection

Detecting anomalies is crucial for various applications, such as identifying fraudulent activities in credit card transactions. Unusual amounts or transactions with atypical businesses can be flagged, leading to improved model features or the development of entirely new models.

## Significance of Outlier Detection

Outliers, resulting from errors or unknown causes, can distort models and impact prediction accuracy. Recognizing outliers is vital to maintaining model integrity and ensuring robust predictions.

## DBSCAN for Outlier Detection

One method for outlier detection is DBSCAN (Density-Based Spatial Clustering of Applications With Noise). This technique considers a point as part of a cluster if it falls within a specified radius of a core point. Otherwise, the point is marked as an outlier. We will illustrate this concept using the multishapes dataset.

```{python}
# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler

# Load the Credit Card Fraud Detection dataset
df = pd.read_csv("creditcard.csv")

# Display the first few rows of the dataset
print(df.head())

# Select features (excluding time and Class columns)
features = df.columns[1:-1]

# Standardize the features
scaler = StandardScaler()
df[features] = scaler.fit_transform(df[features])

# Fit the Isolation Forest model
model = IsolationForest(contamination=0.001, random_state=42)
model.fit(df[features])

# Predict outliers
outlier_preds = model.predict(df[features])
outliers_mask = outlier_preds == -1  # -1 indicates an outlier

# Visualize the results
plt.scatter(df.loc[~outliers_mask, 'V1'], df.loc[~outliers_mask, 'V2'], color='blue', label='Normal')
plt.scatter(df.loc[outliers_mask, 'V1'], df.loc[outliers_mask, 'V2'], color='red', label='Outlier')
plt.title('Isolation Forest - Credit Card Fraud Detection')
plt.xlabel('V1')
plt.ylabel('V2')
plt.legend()
plt.show()

```

In the visualization, normal data points are marked in blue, while outliers are highlighted in red. This representation provides a clear distinction between the normal and outlier observations based on the Isolation Forest model.

## Conclusion

Anomaly and outlier detection are indispensable for maintaining the reliability and accuracy of machine learning models. Employing techniques like DBSCAN and Isolation Forest allows for the identification of unusual patterns, contributing to enhanced model performance and the overall effectiveness of predictive systems.
