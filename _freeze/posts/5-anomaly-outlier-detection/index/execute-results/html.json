{
  "hash": "68104930be30f194bb092f902526d88b",
  "result": {
    "markdown": "---\nexecute:\n  echo: fenced\ntitle: \"Anomaly/outlier detection\"\ntoc: true\ntoc-title: \"Table of Contents\"\ntitle-block-banner: false\nauthor: Kamila Nurkhametova\n---\n\nAnomaly and Outlier Detection play crucial roles in machine learning as they ensure that models accurately represent the overall dataset.\n\nAnomalies are data points that deviate from the expected pattern or distribution of the rest of the data. Detecting anomalies is vital as they can reveal important information. For instance, in analyzing credit card transactions, anomaly detection can identify fraudulent activities by spotting unusual amounts or transactions with atypical businesses. This process can lead to the discovery of new features for model improvement or even the development of an entirely new model.\n\nOutliers, on the other hand, are observations with a low probability of occurrence within the dataset, often distant from other data points. Outliers may result from human or experimental errors, and sometimes their cause is unknown. Detecting outliers is crucial because they can distort the model and impact the accuracy of future predictions.\n\nOne method employed for outlier detection is DBSCAN (Density-Based Spatial Clustering of Applications With Noise). In this method, a point is considered part of the clustering algorithm if it falls within a certain radius of a core point (which has a minimum number of points in its radius). If this condition is not met, DBSCAN marks the point as an outlier. The multishapes dataset will be utilized to illustrate this concept.\n\n::: {.cell execution_count=1}\n```` { .cell-code}\n```{{python}}\n# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import StandardScaler\n\n# Load the Credit Card Fraud Detection dataset\nurl = \"https://storage.googleapis.com/download.tensorflow.org/data/creditcard.csv\"\ndf = pd.read_csv(\"creditcard.csv\")\n\n# Display the first few rows of the dataset\nprint(df.head())\n\n# Select features (excluding time and Class columns)\nfeatures = df.columns[1:-1]\n\n# Standardize the features\nscaler = StandardScaler()\ndf[features] = scaler.fit_transform(df[features])\n\n# Fit the Isolation Forest model\nmodel = IsolationForest(contamination=0.001, random_state=42)\nmodel.fit(df[features])\n\n# Predict outliers\noutlier_preds = model.predict(df[features])\noutliers_mask = outlier_preds == -1  # -1 indicates an outlier\n\n# Visualize the results\nplt.scatter(df.loc[~outliers_mask, 'V1'], df.loc[~outliers_mask, 'V2'], color='blue', label='Normal')\nplt.scatter(df.loc[outliers_mask, 'V1'], df.loc[outliers_mask, 'V2'], color='red', label='Outlier')\nplt.title('Isolation Forest - Credit Card Fraud Detection')\nplt.xlabel('V1')\nplt.ylabel('V2')\nplt.legend()\nplt.show()\n\n```\n\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n   Time        V1        V2        V3        V4        V5        V6        V7  \\\n0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n\n         V8        V9  ...       V21       V22       V23       V24       V25  \\\n0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n\n        V26       V27       V28  Amount  Class  \n0 -0.189115  0.133558 -0.021053  149.62      0  \n1  0.125895 -0.008983  0.014724    2.69      0  \n2 -0.139097 -0.055353 -0.059752  378.66      0  \n3 -0.221929  0.062723  0.061458  123.50      0  \n4  0.502292  0.219422  0.215153   69.99      0  \n\n[5 rows x 31 columns]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-2.png){width=596 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}